1.	Instalacion y uso de Composer
curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer

- composer/composer.json
{
    "name": "djmiguelarango/composer-example",
    "description": "Ejemplo uso Composer",
    "type": "project",
    "authors": [
        {
            "name": "Miguel MGM",
            "email": "djmiguelarango@gmail.com",
            "homepage": "http://djmiguelarango.com",
            "role": "DJ"
        }
    ],
    "require": {
        "php": ">=5.3.0"
    },
    "autoload": {
        "files": ["public/index.php"],
        "psr-4": {
            "": "public/"
        }
    }
}

composer install

composer require dompdf/dompdf 0.6.*

- composer/composer.json
...	"require": {
        "php": ">=5.3.0",
        "dompdf/dompdf": "0.6.*"
    },
 
- composer/public/index.php
<?php

// somewhere early in your project's loading, require the Composer autoloader
// see: http://getcomposer.org/doc/00-intro.md
require '../vendor/autoload.php';

// disable DOMPDF's internal autoloader if you are using Composer
@define('DOMPDF_ENABLE_AUTOLOAD', false);

// include DOMPDF's default configuration
require_once '../vendor/dompdf/dompdf/dompdf_config.inc.php';

$html =
    '<html><body>'.
    '<h1>djmiguelarango</h1>'.
    '<p>Curso Laravel 5.</p>'.
    '</body></html>';

$dompdf = new DOMPDF();
$dompdf->load_html($html);
$dompdf->render();
$dompdf->stream("sample.pdf");


2.	Que es PSR-4 y uso de namespaces
- Los estandares PSR-4 permite a Composer cargar las clases automaticamente

- composer/composer.json
"autoload": {
    "classmap": [
        "Course"
    ],
    "psr-4": {
        
    }
}

composer dump-autoload

- composer/composer.json
"autoload": {
    "psr-4": {
        "App\\": "Course/"
    }
}

composer dump-autoload

- composer/Course/Core/View/Template.php
<?php namespace App\Core\View;

class Template
{
    public static function render($file, array $data = array()) {
        ob_start();
        extract($data);
        include '../templates/' . $file . '.php';
        return ob_get_clean();
    }
}

- composer/Course/Helpers/Pdf.php
<?php namespace App\Helpers;

use DOMPDF;

class Pdf
{
    protected static $configured = false;

    public static function configure() {
        if (static::$configured) return;


        // disable DOMPDF's internal autoloader if you are using Composer
        define('DOMPDF_ENABLE_AUTOLOAD', false);

        // include DOMPDF's default configuration
        require_once '../vendor/dompdf/dompdf/dompdf_config.inc.php';

        static::$configured = true;
    }

    public static function render($file, $html) {
        static::configure();

        $dompdf = new DOMPDF();
        $dompdf->load_html($html);
        $dompdf->render();
        $dompdf->stream("$file.pdf");
    }

}

- composer/public/download.php
<?php

use App\Core\View\Template;
use App\Helpers\Pdf;

// somewhere early in your project's loading, require the Composer autoloader
// see: http://getcomposer.org/doc/00-intro.md
require '../vendor/autoload.php';

//require '../Course/Template.php';
//require '../Course/Pdf.php';

$data = array(
    'name'      => 'Miguel Mamani',
    'course'    => 'Curso de Laravel'
);

$html = Template::render('pdf/certificate', $data);

Pdf::render('sample', $html);

3.	Vagrant y Homestead
- Entorno de desarrollo que provee PHP y un Servidor Web
- Instalar VirtualBox o VMware y Vagrant

vagrant box add laravel/homestead [file]
composer global require "laravel/homestead=2.0"
php vendor/bin/homestead make
nano ~/.bash_profile
export PATH="$HOME/.composer/vendor/bin:$PATH"

ssh-keygen -t rsa -C "you@email"

homestead init - homestead edit

- Homestead.yaml
ip: "192.168.10.10"
memory: 2048
cpus: 1
provider: virtualbox

authorize: ~/.ssh/id_rsa.pub

keys:
    - ~/.ssh/id_rsa

folders:
    - map: /Users/Miguel/Developer/Code_PHP
      to: /home/vagrant/Code

sites:
    - map: laravel5.app
      to: /home/vagrant/Code/Laravel5/

databases:
    - homestead

variables:
    - key: APP_ENV
      value: local

- Editar el host del SO y agregar
sudo nano /etc/hosts

192.168.10.10   laravel5.app

- Iniciar la VM
homestead up
homestead up --provision

- Detener la VM
homestead halt

- Acceder a la VM
homestead ssh (user=vagrant - password=vagrant)

- Acceder a MySQL
mysql -u homestead -p secret

- Instalar phpmyadmin
sudo apt-get install phpmyadmin

sudo ln -s /usr/share/phpmyadmin/ /home/vagrant/Code/phpmyadmin
serve my.admin /home/vagrant/Code/phpmyadmin
OR-------------------------------------------------------------
sudo ln -s /usr/share/phpmyadmin/ /usr/share/nginx/html/phpmyadmin
serve my.admin /usr/share/nginx/html/phpmyadmin

- /etc/hosts
192.168.10.10   my.admin


4.	Nueva estructura de carpetas para los proyectos de Laravel 5
- Instalar Laravel 5
- Via Laravel Installer
composer global require "laravel/installer=~1.1"
laravel new {directory}

- Via Composer
composer create-project laravel/laravel {directory} 5.0 --prefer-dist

- app
Contiene las clases de la aplicacion usando el estandar PSR-4

php artisan app:name Course (Cambia el namespace de la aplicacion)

- config 
Mas simplificada que la version 4.2
Usa el archivo .env (Variables de entorno)

- database
migraations (Crear tablas de la DB usando objetos y metodos - Actua como un control de versiones de la DB)
seeds (Cargar datos de prueba a las Tablas)

- public
Archivos de acceso publico (CSS, JS)

- resources
Vistas de Laravel (Blade es el motor de plantillas de Laravel)


5.	Autenticacion de usuarios con Laravel 5
- Middlewares 
Es un mecanismo para el filtado de solicitudes
Para ejecutar un middleware durante cada solicitud HTTP enumerar la clase middleware en la propiedad $routeMiddleware de la clase app/Http/Kernel.php

- Crear y configurar la Base de Datos
create database course;
- .env

- database/migrations (Control de versiones de la DB)
- database/migrations/2014_10_12_000000_create_users_table.php
class CreateUsersTable extends Migration {
	public function up()
	{
		Schema::create('users', function(Blueprint $table)
		{
			$table->increments('id');
			$table->string('name');
			$table->string('email')->unique();
			$table->string('password', 60);
			$table->rememberToken();
			$table->timestamps();
		});
	}

	public function down()
	{
		Schema::drop('users');
	}
}

php artisan migrate

- seeders (Poblar la DB con datos de prueba)
- database/seeds/DatabaseSeeder.php
class DatabaseSeeder extends Seeder {
	public function run()
	{
		Model::unguard();

		$this->call('UserTableSeeder');
	}
}

- database/seeds/UserTableSeeder.php
class UserTableSeeder extends Seeder
{
    public function run() {
        DB::table('users')->delete();

        User::create([
            'name'      => 'Miguel MG',
            'email'     => 'djmiguelarango@gmail.com',
            'password'  => Hash::make('secret')
        ]);
    }
}

composer dump-autoload
php artisan db:seed
php artisan db:seed --class=UserTableSeeder


6.  Creando Migraciones en Laravel 5
- Crontrol de versiones de Base de Datos
- Definir tablas con POO en vez de SQL
- Compatible con los diferentes motores
- Ideal para trabajar en equipo
- Schema Builder
- Migrations & Seeding

- Helps
php artisan help [command]

- database/migrations/2014_10_12_000000_create_users_table.php
public function up()
{
    Schema::create('users', function(Blueprint $table)
    {
        $table->increments('id');
        $table->string('first_name', 20);
        $table->string('last_name', 20);
        $table->string('email')->unique();
        $table->string('password', 60);
        $table->boolean('active')->default(true);
        $table->rememberToken();
        $table->timestamps();
    });
}

php artisan migrate:rollback
php artisa migrate

php artisan make:migration create_tags_table --create=tags
- database/migrations/2015_07_28_014947_create_tags_table.php
public function up()
{
    Schema::create('tags', function(Blueprint $table)
    {
        $table->increments('id');
        $table->string('name', 20);
        $table->mediumText('description')->nullable();
        $table->timestamps();
    });
}

php artisan make:migration create_user_profiles_table --create=user_profiles
- database/migrations/2015_07_28_015759_create_user_profiles_table.php
Schema::create('user_profiles', function(Blueprint $table)
{
    $table->increments('id');
    $table->mediumText('biography')->nullable();
    $table->string('twitter')->nullable();
    $table->string('website', 140)->nullable();
    $table->integer('user_id')->unsigned();
    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
    $table->timestamps();
});

php artisan migrate

php artisan make:migration drop_active_column_from_users --table=users
- database/migrations/2015_07_28_021221_drop_active_column_from_users.php
public function up()
{
    Schema::table('users', function(Blueprint $table)
    {
        $table->dropColumn('active');
    });
}

public function down()
{
    Schema::table('users', function(Blueprint $table)
    {
        $table->boolean('active')->default(true);
    });
}

php artisan migrate


7.  Seeders y el componente Faker en Laravel 5
php artisan migrate:reset

composer require --dev fzaninotto/faker

- database/seeds/AdminTableSeeder.php
public function run() {
    DB::table('users')->insert(array(
        'first_name'    => 'Miguel',
        'last_name'     => 'MG',
        'email'         => 'djmiguelarango@gmail.com',
        'password'      => Hash::make('secret'),
        'type'          => 'admin'
    ));
}

- database/seeds/UserTableSeeder.php
use Faker\Factory as Faker;

public function run() {
    $faker = Faker::create();

    for ($i = 0; $i < 30; $i++) {
        $id = DB::table('users')->insertGetId(array(
            'first_name'    => $faker->firstName,
            'last_name'     => $faker->lastName,
            'email'         => $faker->unique()->email,
            'password'      => Hash::make('123456'),
            'type'          => 'user'
        ));

        DB::table('user_profiles')->insert(array(
            'user_id'   => $id,
            'biography' => $faker->paragraph(rand(2, 5)),
            'twitter'   => 'http://www.twitter.com/' . $faker->userName,
            'website'   => 'http://www.' . $faker->domainName
        ));
    }
}

- database/migrations/2015_07_28_014947_create_tags_table.php
public function up()
{
    Schema::create('tags', function(Blueprint $table)
    {
        $table->increments('id');
        $table->string('name', 20);
        $table->mediumText('description')->nullable();
        $table->timestamps();
    });
}

composer dump-autoload
php artisan migrate:refresh --seed

8.  Eloquent y Fluent en Laravel 5 (Query Builder - Eloquent)
- Fluent (Generador de consultas de Base de Datos)
- Eloquent ORM de Laravel 5 (Trabajar las tablas y relaciones como objetos)

- app/Http/routes.php
Route::controllers([
    'users' => 'UsersController',
]);

- app/Http/Controllers/UsersController.php
class UsersController extends Controller
{
    public function getIndex() {
        $users = DB::table('users')
            ->select([
                'users.id',
                'first_name',
                'last_name',
                'user_profiles.twitter',
                'user_profiles.id as profile_id'])
            ->leftJoin('user_profiles', 'user_profiles.user_id', '=', 'users.id')
            ->where('first_name', '!=', 'miguel')
            ->orderBy('first_name', 'ASC')
            ->get();

        dd($users);

        return $users;
    }
}

- ORM (Mapear datos de la base de datos para convertirlos a objetos y viceversa tomar un objeto y guardarlo como un registro en la DB)
- Trabajar en un ambiente mas compatible

- app/User.php
public function profile() {
    // $this->hasOne('App\UserProfile');
    return $this->hasOne('App\UserProfile', 'user_id', 'id');
}

public function getFullNameAttribute() {
    return $this->first_name . ' ' . $this->last_name;
}

php artisan make:model UserProfile
- app/UserProfile.php
class UserProfile extends Model {

    protected $table = 'user_profiles';

    public function getAgeAttribute() {
        return Carbon::parse($this->birthdate)->age;
    }
}

- app/Http/Controllers/UsersController.php
public function getOrm() {
    $users = User::select('id', 'first_name', 'last_name')
        ->with('profile')
        ->orderBy('first_name', 'asc')
        ->get();

    dd($users->toArray());
    // dd($users->full_name);
    // dd($users->profile->age);
}


9.  Blade (Montor de Plantillas)
- Blade Templates
- app/Http/routes.php
Route::get('example', function() {
    $user = 'Miguel';
    return view('examples.template', compact('user'));
});

- resources/views/examples/layout.blade.php
<!DOCTYPE html>
<html>
<head>
    <title>Curso Laravel</title>
    <style type="text/css">
        body {
            background: #F26764;
            font-family: "Open Sans",sans-serif !important;
            font-size: 40px;
            color: #FFFFFF;
            text-align: center;
        }
    </style>
</head>
<body>

@yield('content')

</body>
</html>

- resources/views/examples/template.blade.php
@extends('examples.layout')
@section('content')
    <h1>Curso basico de Laravel 5</h1>
    <p>
        @if(isset($user))
            {{ $user }}
        @else
            [Login]
        @endif
    </p>
@endsection


10. Integrando los componentes HTML y Form a Laravel
- Laravel Collective 5.0 - 5.1
- assets (Archivos no compilados Sass, Less , Styles, JS, CofeeScript, etc)

- composer.json
"require": {
    "laravelcollective/html": "~5.0"
},

composer update

- config/app.php
'providers' => [
    'Collective\Html\HtmlServiceProvider',
],

'aliases' => [
    'Form' => 'Collective\Html\FormFacade',
    'Html' => 'Collective\Html\HtmlFacade',
],

- resources/views/app.blade.php
{!! Html::style('css/app.css') !!}
{{--<link href="{{ asset('css/app.css') }}" rel="stylesheet">--}}

- resources/views/auth/login.blade.php
{!! Form::email('email', null, ['class' => 'form-control']) !!}
{{--<input type="email" class="form-control" name="email" value="{{ old('email') }}">--}}

{!! Form::password('password', ['class' => 'form-control']) !!}
{{--<input type="password" class="form-control" name="password">--}}


11. Paginacion en Laravel 5
- Pagination
- HTTP Routing

- app/Http/routes.php
RoRoute::group(['prefix' => 'admin', 'namespace' => 'Admin'], function() {
    Route:resource('users', 'UsersController');
});

php artisan make:controller Admin/UsersController
php artisan route:list

- app/Http/Controllers/Admin/UsersController.php
public function index()
{
    $users = User::paginate(7);
    // dd($users);
    return view('admin.index', ['users' => $users]);
}

- resources/views/admin/index.blade.php
{{ $users->total() }} Usuarios en Total

@foreach($users as $user)
<tr>
    <td>{{ $user->id }}</td>
    <td>{{ $user->full_name }}</td>
    <td>{{ $user->email }}</td>
    <td>{{ $user->type_user }}</td>
    <td>
        <a href="#">Editar</a>
        <a href="#">Eliminar</a>
    </td>
</tr>
@endforeach

{!! $users->render() !!}


12. Creacion de usuarios
- HTTP Responses
- HTTP Requests

- resources/views/admin/index.blade.php
<a class="btn btn-info" href="{{ route('admin.users.create') }}" role="button">
    Nuevo Usuario
</a>

- app/Http/Controllers/Admin/UsersController.php
public function create()
{
    return view('admin.create');
}

- resources/views/admin/create.blade.php
{!! Form::open(['route' => 'admin.users.store']) !!}
<div class="form-group">
    {!! Form::label('first_name', 'Nombres') !!}
    {!! Form::text('first_name', null, ['class' => 'form-control', 'placeholder' => 'Nombres']) !!}
</div>

<div class="form-group">
    {!! Form::label('last_name', 'Apellidos') !!}
    {!! Form::text('last_name', null, ['class' => 'form-control', 'placeholder' => 'Apellidos']) !!}
</div>

<div class="form-group">
    {!! Form::label('email', 'Email') !!}
    {!! Form::email('email', null, ['class' => 'form-control', 'placeholder' => 'Email']) !!}
</div>

<div class="form-group">
    {!! Form::label('password', 'Contraseña') !!}
    {!! Form::password('password', ['class' => 'form-control', 'placeholder' => 'Contraseña']) !!}
</div>

<div class="form-group">
    {!! Form::label('type', 'Tipo') !!}
    {!! Form::select('type',
        ['' => 'Seleccione...', 'admin' => 'Administrador', 'user' => 'Usuario'],
        null, ['class' => 'form-control']) !!}
</div>

<button type="submit" class="btn btn-success">Registrar</button>
{!! Form::close() !!}

- app/User.php
protected $fillable = ['first_name', 'last_name', 'email', 'password', 'type'];

- app/Http/Controllers/Admin/UsersController.php
public function store(Request $request)
{
    $data = $request->all();
    // dd($data);

    $user = new User($data);
    $user->save();

    // return redirect('admin/users');
    return redirect()->route('admin.users.index');
}


13. Edicion de Usuarios
- resources/views/admin/index.blade.php
<a href="{{ route('admin.users.edit', [$user->id]) }}">Editar</a>

- app/Http/Controllers/Admin/UsersController.php
public function edit($id)
{
    $user = User::findOrFail($id);
    return view('admin.edit', ['user' => $user]);
}

- resources/views/admin/partials/fields.blade.php
<div class="form-group">
    {!! Form::label('first_name', 'Nombres') !!}
    {!! Form::text('first_name', null, ['class' => 'form-control', 'placeholder' => 'Nombres']) !!}
</div>

- resources/views/admin/edit.blade.php
{!! Form::model($user, ['route' => ['admin.users.update', $user->id], 'method' => 'PUT']) !!}
@include('admin.partials.fields')
<button type="submit" class="btn btn-success">Actualizar</button>
{!! Form::close() !!}

- app/User.php
public function setPasswordAttribute($value) {
    if (!empty($value)) {
        return $this->attributes['password'] = Hash::make($value);
    }
}

- app/Http/Controllers/Admin/UsersController.php
public function update($id, Request $request)
{
    $user = User::findOrFail($id);
    $user->fill($request->all());
    $user->save();

    return redirect()->route('admin.users.index');
}


14. Validacion 1
- Validation

php artisan make:request CreateUserRequest

- app/Http/Requests/CreateUserRequest.php
public function authorize()
{
    return true;
}

public function rules()
{
    return [
        'first_name'    => 'required',
        'last_name'     => 'required',
        'email'         => 'required|unique:users,email',
        'password'      => 'required',
        'type'          => 'required',
    ];
}

- app/Http/Controllers/Admin/UsersController.php
public function store(CreateUserRequest $request)
{
    $user = new User($request->all());
    $user->save();
    return redirect()->route('admin.users.index');
}

- resources/views/admin/create.blade.php
@if(count($errors) > 0)
    <div class="alert alert-danger" role="alert">
        <ul>
            @foreach($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif


15. Validacion 2
php artisan make:request EditUserRequest

- app/Http/Requests/EditUserRequest.php
class EditUserRequest extends Request {
    public function __construct(Route $route) {

        $this->route = $route;
    }
    
    public function authorize()
    {
        return true;
    }

    public function rules()
    {
        return [
            'first_name'    => 'required',
            'last_name'     => 'required',
            'email'         => 'required|unique:users,email,' . $this->route->getParameter('users'),
            'password'      => '',
            'type'          => 'required|in:admin,user',
        ];
    }
}

- app/Http/Controllers/Admin/UsersController.php
public function update(EditUserRequest $request, $id)
{
    $user = User::findOrFail($id);
    $user->fill($request->all());
    $user->save();

    return redirect()->route('admin.users.index');
}

- resources/views/admin/partials/messages.blade.php
@if(count($errors) > 0)
    <div class="alert alert-danger" role="alert">
        <ul>
            @foreach($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif

- resources/views/admin/edit.blade.php
@include('admin.partials.messages')


16. Internacionalizacion
- Localization

- https://github.com/caouecs/Laravel-lang
copy to resources/lang/es

- config/app.php
'locale' => 'es',
'fallback_locale' => 'en',

- resources/lang/es/passwords.php
"credentials" => array(
    "invalid" => "Estas credenciales no coinciden con nuestros registros.",
),

- vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesAndRegistersUsers.php
protected function getFailedLoginMessage()
{
    // return 'These credentials do not match our records.';
    return trans('passwords.credentials.invalid');
}

- resources/lang/es/validation.php
'attributes' => [
    'email' => 'Correo Electrónico',
    'password' => 'Contraseña',
],

- resources/views/auth/login.blade.php
<label class="col-md-4 control-label">{{ trans('validation.attributes.email') }}</label>
<label class="col-md-4 control-label">{{ trans('validation.attributes.password') }}</label>


17. Eliminar registros
- Session

- resources/views/admin/partials/delete.blade.php
{!! Form::open(array('route' => ['admin.users.destroy', $user->id], 'method' => 'DELETE')) !!}
<button type="submit" class="btn btn-danger">Eliminar Usuario</button>
{!! Form::close() !!}

- resources/views/admin/edit.blade.php
@include('admin.partials.delete')

- app/Http/Controllers/Admin/UsersController.php
public function destroy($id)
{
    // dd($id);
    // User::destroy($id);
    $user = User::findOrFail($id);
    $user->delete();

    Session::flash('message', 'El usuario ' . $user->full_name . ' fue eliminado');

    return redirect()->route('admin.users.index');
}

- resources/views/admin/index.blade.php
@if(Session::has('message'))
    <p class="alert alert-success">{{ Session::get('message') }}</p>
@endif


18. Principio de diseño DRY
- app/Http/Controllers/Admin/UsersController.php
public function __construct() {
    $this->beforeFilter('@findUser', ['only' => ['show', 'edit', 'update', 'destroy']]);
}

public function findUser(Route $route) {
    $this->user = User::findOrFail($route->getParameter('users'));
}

public function edit($id)
{
    return view('admin.edit')->with('user', $this->user);
}

public function update(EditUserRequest $request, $id)
{
    $this->user->fill($request->all());
    $this->user->save();
    return redirect()->route('admin.users.index');
}

public function destroy($id)
{
    $this->user->delete();
    Session::flash('message', 'El usuario ' . $this->user->full_name . ' fue eliminado');
    return redirect()->route('admin.users.index');
}


19. 
20.
21.
22.
23.
24.
25.












